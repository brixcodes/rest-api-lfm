import pytest
import asyncio
import httpx
from datetime import datetime, timedelta
import time

# Configuration de base
API_BASE = "http://localhost:8000/api/v1"
TIMEOUT = 30

# Donn√©es de test
def get_resultat_data(evaluation_id: int, candidat_id: int):
    timestamp = int(time.time())
    return {
        "evaluation_id": evaluation_id,
        "candidat_id": candidat_id,
        "date_debut": datetime.now().isoformat(),
        "statut": "en_cours",
        "score_obtenu": None,
        "nombre_questions_repondues": 0,
        "nombre_questions_correctes": 0,
        "temps_total_secondes": None,
        "commentaires_correcteur": None,
        "type_correction": None
    }

def get_reponse_data(question_id: int, candidat_id: int):
    timestamp = int(time.time())
    return {
        "question_evaluation_id": question_id,
        "candidat_id": candidat_id,
        "reponse_texte": f"R√©ponse test {timestamp}",
        "reponse_choix": None,
        "temps_reponse_secondes": 30,
        "est_correcte": None,
        "commentaire_correcteur": None,
        "note_obtenue": None
    }

@pytest.mark.asyncio
async def test_diagnostic():
    """Test de diagnostic pour v√©rifier l'√©tat de l'API"""
    print("üîç Test 1: V√©rification de l'API")
    
    async with httpx.AsyncClient(timeout=TIMEOUT) as client:
        try:
            response = await client.get(f"{API_BASE}/")
            print(f"   API accessible: {response.status_code == 200}")
        except Exception as e:
            print(f"   ‚ùå Erreur API: {e}")
            return False
    
    print("üîç Test 2: V√©rification des routes resultats-evaluations")
    async with httpx.AsyncClient(timeout=TIMEOUT) as client:
        try:
            # Test de la route GET /resultats-evaluations
            response = await client.get(f"{API_BASE}/resultats-evaluations")
            print(f"   Route GET /resultats-evaluations: {response.status_code}")
            
            # Test de la route GET /resultats-evaluations/{resultat_id}
            response = await client.get(f"{API_BASE}/resultats-evaluations/1")
            print(f"   Route GET /resultats-evaluations/1: {response.status_code}")
            
        except Exception as e:
            print(f"   ‚ùå Erreur test routes: {e}")
    
    return True

@pytest.mark.asyncio
async def test_create_resultat_simple():
    """Test simple de cr√©ation d'un r√©sultat d'√©valuation"""
    print("üîç Test de cr√©ation simple d'un r√©sultat d'√©valuation...")
    
    # Donn√©es de test avec des IDs qui n'existent probablement pas
    resultat_data = get_resultat_data(999, 999)
    
    async with httpx.AsyncClient(timeout=TIMEOUT) as client:
        try:
            response = await client.post(f"{API_BASE}/resultats-evaluations", json=resultat_data)
            print(f"   Cr√©ation r√©sultat: {response.status_code}")
            
            if response.status_code == 409:
                print("   ‚úÖ Erreur 409 attendue - IDs n'existent pas")
                return True
            elif response.status_code == 201:
                print("   ‚úÖ Cr√©ation r√©ussie")
                return True
            else:
                print(f"   ‚ùå Erreur inattendue: {response.status_code}")
                print(f"   D√©tail: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la cr√©ation: {e}")
            return False

@pytest.mark.asyncio
async def test_commencer_evaluation():
    """Test de la route commencer une √©valuation"""
    print("üîç Test de la route commencer √©valuation...")
    
    data = {
        "evaluation_id": 999,
        "candidat_id": 999
    }
    
    async with httpx.AsyncClient(timeout=TIMEOUT) as client:
        try:
            response = await client.post(f"{API_BASE}/resultats-evaluations/commencer", json=data)
            print(f"   Commencer √©valuation: {response.status_code}")
            
            if response.status_code == 409:
                print("   ‚úÖ Erreur 409 attendue - IDs n'existent pas")
                return True
            elif response.status_code == 201:
                print("   ‚úÖ Commencer √©valuation r√©ussie")
                return True
            else:
                print(f"   ‚ùå Erreur inattendue: {response.status_code}")
                print(f"   D√©tail: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erreur lors du test: {e}")
            return False

@pytest.mark.asyncio
async def test_soumettre_evaluation():
    """Test de la route soumettre une √©valuation"""
    print("üîç Test de la route soumettre √©valuation...")
    
    data = {
        "reponses": [
            {
                "question_id": 999,
                "reponse_texte": "R√©ponse test",
                "reponse_choix": None,
                "temps_reponse_secondes": 30
            }
        ]
    }
    
    async with httpx.AsyncClient(timeout=TIMEOUT) as client:
        try:
            response = await client.post(f"{API_BASE}/resultats-evaluations/999/soumettre", json=data)
            print(f"   Soumettre √©valuation: {response.status_code}")
            
            if response.status_code == 404:
                print("   ‚úÖ Erreur 404 attendue - ID n'existe pas")
                return True
            elif response.status_code == 200:
                print("   ‚úÖ Soumission r√©ussie")
                return True
            else:
                print(f"   ‚ùå Erreur inattendue: {response.status_code}")
                print(f"   D√©tail: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erreur lors du test: {e}")
            return False

@pytest.mark.asyncio
async def test_corriger_evaluation():
    """Test de la route corriger une √©valuation"""
    print("üîç Test de la route corriger √©valuation...")
    
    data = {
        "score_obtenu": 85.5,
        "nombre_questions_correctes": 8,
        "commentaires_correcteur": "Bonne performance",
        "type_correction": "automatique"
    }
    
    async with httpx.AsyncClient(timeout=TIMEOUT) as client:
        try:
            response = await client.put(f"{API_BASE}/resultats-evaluations/999/corriger", json=data)
            print(f"   Corriger √©valuation: {response.status_code}")
            
            if response.status_code == 404:
                print("   ‚úÖ Erreur 404 attendue - ID n'existe pas")
                return True
            elif response.status_code == 200:
                print("   ‚úÖ Correction r√©ussie")
                return True
            else:
                print(f"   ‚ùå Erreur inattendue: {response.status_code}")
                print(f"   D√©tail: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erreur lors du test: {e}")
            return False

@pytest.mark.asyncio
async def test_get_resultat_by_id():
    """Test de la route r√©cup√©rer un r√©sultat par ID"""
    print("üîç Test de la route get resultat par ID...")
    
    async with httpx.AsyncClient(timeout=TIMEOUT) as client:
        try:
            response = await client.get(f"{API_BASE}/resultats-evaluations/999")
            print(f"   Get resultat par ID: {response.status_code}")
            
            if response.status_code == 404:
                print("   ‚úÖ Erreur 404 attendue - ID n'existe pas")
                return True
            elif response.status_code == 200:
                print("   ‚úÖ R√©cup√©ration r√©ussie")
                return True
            else:
                print(f"   ‚ùå Erreur inattendue: {response.status_code}")
                print(f"   D√©tail: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erreur lors du test: {e}")
            return False

@pytest.mark.asyncio
async def test_get_resultats_by_evaluation():
    """Test de la route r√©cup√©rer les r√©sultats d'une √©valuation"""
    print("üîç Test de la route get resultats par √©valuation...")
    
    async with httpx.AsyncClient(timeout=TIMEOUT) as client:
        try:
            response = await client.get(f"{API_BASE}/resultats-evaluations/evaluation/999")
            print(f"   Get resultats par √©valuation: {response.status_code}")
            
            if response.status_code == 404:
                print("   ‚úÖ Erreur 404 attendue - ID n'existe pas")
                return True
            elif response.status_code == 200:
                print("   ‚úÖ R√©cup√©ration r√©ussie")
                return True
            else:
                print(f"   ‚ùå Erreur inattendue: {response.status_code}")
                print(f"   D√©tail: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erreur lors du test: {e}")
            return False

@pytest.mark.asyncio
async def test_get_resultats_by_candidat():
    """Test de la route r√©cup√©rer les r√©sultats d'un candidat"""
    print("üîç Test de la route get resultats par candidat...")
    
    async with httpx.AsyncClient(timeout=TIMEOUT) as client:
        try:
            response = await client.get(f"{API_BASE}/resultats-evaluations/candidat/999")
            print(f"   Get resultats par candidat: {response.status_code}")
            
            if response.status_code == 404:
                print("   ‚úÖ Erreur 404 attendue - ID n'existe pas")
                return True
            elif response.status_code == 200:
                print("   ‚úÖ R√©cup√©ration r√©ussie")
                return True
            else:
                print(f"   ‚ùå Erreur inattendue: {response.status_code}")
                print(f"   D√©tail: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erreur lors du test: {e}")
            return False

@pytest.mark.asyncio
async def test_update_resultat():
    """Test de la route mettre √† jour un r√©sultat"""
    print("üîç Test de la route update resultat...")
    
    data = {
        "score_obtenu": 90.0,
        "commentaires_correcteur": "Mise √† jour test"
    }
    
    async with httpx.AsyncClient(timeout=TIMEOUT) as client:
        try:
            response = await client.put(f"{API_BASE}/resultats-evaluations/999", json=data)
            print(f"   Update resultat: {response.status_code}")
            
            if response.status_code == 404:
                print("   ‚úÖ Erreur 404 attendue - ID n'existe pas")
                return True
            elif response.status_code == 200:
                print("   ‚úÖ Mise √† jour r√©ussie")
                return True
            else:
                print(f"   ‚ùå Erreur inattendue: {response.status_code}")
                print(f"   D√©tail: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erreur lors du test: {e}")
            return False

@pytest.mark.asyncio
async def test_delete_resultat():
    """Test de la route supprimer un r√©sultat"""
    print("üîç Test de la route delete resultat...")
    
    async with httpx.AsyncClient(timeout=TIMEOUT) as client:
        try:
            response = await client.delete(f"{API_BASE}/resultats-evaluations/999")
            print(f"   Delete resultat: {response.status_code}")
            
            if response.status_code == 404:
                print("   ‚úÖ Erreur 404 attendue - ID n'existe pas")
                return True
            elif response.status_code == 204:
                print("   ‚úÖ Suppression r√©ussie")
                return True
            else:
                print(f"   ‚ùå Erreur inattendue: {response.status_code}")
                print(f"   D√©tail: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erreur lors du test: {e}")
            return False

@pytest.mark.asyncio
async def test_get_all_resultats():
    """Test de la route r√©cup√©rer tous les r√©sultats"""
    print("üîç Test de la route get all resultats...")
    
    async with httpx.AsyncClient(timeout=TIMEOUT) as client:
        try:
            response = await client.get(f"{API_BASE}/resultats-evaluations")
            print(f"   Get all resultats: {response.status_code}")
            
            if response.status_code == 200:
                print("   ‚úÖ R√©cup√©ration r√©ussie")
                data = response.json()
                print(f"   Nombre de r√©sultats: {len(data)}")
                return True
            else:
                print(f"   ‚ùå Erreur: {response.status_code}")
                print(f"   D√©tail: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erreur lors du test: {e}")
            return False

if __name__ == "__main__":
    print("üöÄ D√©marrage des tests du module resultats-evaluations...")
    
    # Ex√©cuter les tests dans l'ordre
    tests = [
        test_diagnostic,
        test_create_resultat_simple,
        test_commencer_evaluation,
        test_soumettre_evaluation,
        test_corriger_evaluation,
        test_get_resultat_by_id,
        test_get_resultats_by_evaluation,
        test_get_resultats_by_candidat,
        test_update_resultat,
        test_delete_resultat,
        test_get_all_resultats
    ]
    
    for test in tests:
        try:
            asyncio.run(test())
            print("‚úÖ Test termin√© avec succ√®s\n")
        except Exception as e:
            print(f"‚ùå Erreur lors du test: {e}\n")
    
    print("üèÅ Tous les tests sont termin√©s")
